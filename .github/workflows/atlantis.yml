name: Terraform with Atlantis

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
        
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        project_id: polished-tube-312806
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Download Atlantis
      run: |
        wget https://github.com/runatlantis/atlantis/releases/download/v0.19.8/atlantis_linux_amd64.zip
        unzip atlantis_linux_amd64.zip
        sudo mv atlantis /usr/local/bin/

    - name: Create Atlantis config
      run: |
        cat > atlantis-config.yaml <<EOF
        repos:
        - id: ${{ github.repository }}
          workflow: custom
        workflows:
          custom:
            plan:
              steps:
              - run: terraform init -input=false
              - run: terraform plan -input=false -out=\$PLANFILE
            apply:
              steps:
              - run: terraform apply -input=false \$PLANFILE
        EOF

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        # Set SSH key for CI/CD - use secret if available, otherwise use dummy key
        if [ -n "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
          echo 'ssh_pub_key = "${{ secrets.SSH_PUBLIC_KEY }}"' >> terraform.auto.tfvars
        else
          echo 'ssh_pub_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDummy"' >> terraform.auto.tfvars
        fi
        terraform plan -no-color -out=tfplan.binary
        terraform show -json tfplan.binary > plan.json
      continue-on-error: true
      
    - name: Generate Infracost cost estimate
      id: infracost
      run: |
        # Use --no-terraform-init-flags to prevent Infracost from running terraform init
        # This avoids the duplicate provider configuration error
        infracost breakdown --path plan.json --format json --out-file infracost.json --no-terraform-init
        infracost output --path infracost.json --format table --show-skipped
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        INFRACOST: "${{ steps.infracost.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let infracostOutput = '';
          try {
            const infracostJson = JSON.parse(fs.readFileSync('infracost.json', 'utf8'));
            const totalMonthlyCost = infracostJson.totalMonthlyCost || 0;
            const diffMonthlyCost = infracostJson.diffTotalMonthlyCost || 0;
            
            infracostOutput = `
          #### Infracost Cost Estimate üí∞
          
          **Monthly cost will increase by $${diffMonthlyCost > 0 ? diffMonthlyCost.toFixed(2) : '0.00'} to $${totalMonthlyCost.toFixed(2)}**
          
          <details><summary>Show Cost Breakdown</summary>
          
          \`\`\`
          ${process.env.INFRACOST}
          \`\`\`
          
          </details>
          `;
          } catch (error) {
            infracostOutput = `
          #### Infracost Cost Estimate üí∞
          
          Failed to generate cost estimate: ${error.message}
          `;
          }
          
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          ${infracostOutput}
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Process Atlantis Commands
      if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'atlantis')
      run: |
        # Set SSH key for CI/CD - use secret if available, otherwise use dummy key
        if [ -n "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
          echo 'ssh_pub_key = "${{ secrets.SSH_PUBLIC_KEY }}"' >> terraform.auto.tfvars
        else
          echo 'ssh_pub_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDummy"' >> terraform.auto.tfvars
        fi
        
        if [[ "${{ github.event.comment.body }}" == *"atlantis apply"* ]]; then
          terraform apply -auto-approve
          echo "Applied changes via Atlantis command"
        elif [[ "${{ github.event.comment.body }}" == *"atlantis plan"* ]]; then
          terraform plan -out=tfplan.binary
          terraform show -json tfplan.binary > plan.json
          
          # Generate Infracost estimate
          # Use --no-terraform-init to prevent Infracost from running terraform init
          # This avoids the duplicate provider configuration error
          infracost breakdown --path plan.json --format json --out-file infracost.json --no-terraform-init
          infracost output --path infracost.json --format table --show-skipped
          
          # Extract cost information for the comment
          TOTAL_COST=$(jq -r '.totalMonthlyCost // 0' infracost.json)
          DIFF_COST=$(jq -r '.diffTotalMonthlyCost // 0' infracost.json)
          
          echo "Generated plan via Atlantis command"
          echo "üí∞ Monthly cost estimate: $${TOTAL_COST} (change: $${DIFF_COST})"
        fi
